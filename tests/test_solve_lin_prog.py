# test_solve_lin_prog.py

import unittest
import numpy as np

from src.solve_lin_prog import SOlVELINPROG
from src.random_tree import RANDOMTREE


class TestClass(unittest.TestCase):

    def test_b(self): 
        
        adj_list = {0: {"children": [1,2]}, 
                    1: {"children": [3]}, 
                    2: {"children": []}, 
                    3: {"children": []}}

        rt = RANDOMTREE(adj_list = adj_list)
        fv = rt.get_fairness_vectors(delta=0)
        lprog = SOlVELINPROG(rt, 2, alpha = fv['alpha'], beta = fv['beta'])

        b = lprog.b()
        b_ = np.array([2,                       
                       -1, -1, -1, -1, 
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0])
        
        self.assertEqual(len(b), len(b_))
        for i in range(len(b)): 
            self.assertEqual(b[i], b_[i])
        
    def test_A(self): 

        adj_list = {0: {"children": [1, 2, 3], "color": 1}, 
                    1: {"color": 1}, 
                    2: {"color": 2}, 
                    3: {"color": 2},}
        
        rt = RANDOMTREE(adj_list=adj_list)
        fv = rt.get_fairness_vectors()
        lprog = SOlVELINPROG(rt, 1, alpha=fv['alpha'], beta=fv['beta'])

        A = lprog.A()
        A_ = np.array([
            [ 1,  1,  1,  1,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0], # Condition 1
            [ 0,  0,  0,  0,   -1,   -1,   -1,   -1,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0], # Condition 2 Start
            [ 0,  0,  0,  0,    0,    0,    0,    0,   -1,   -1,   -1,   -1,     0,     0,     0,     0,     0,     0,     0,     0],
            [ 0,  0,  0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    -1,    -1,    -1,    -1,     0,     0,     0,     0],
            [ 0,  0,  0,  0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,    -1,    -1,    -1,    -1], # Condition 2 end
            [-1,  0,  0,  0,    1,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0], # Condition 3 start
            [ 0, -1,  0,  0,    0,    1,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0],
            [ 0,  0, -1,  0,    0,    0,    1,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0],
            [ 0,  0,  0, -1,    0,    0,    0,    1,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0],
            [-1,  0,  0,  0,    0,    0,    0,    0,    1,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0],
            [ 0, -1,  0,  0,    0,    0,    0,    0,    0,    1,    0,    0,     0,     0,     0,     0,     0,     0,     0,     0],
            [ 0,  0, -1,  0,    0,    0,    0,    0,    0,    0,    1,    0,     0,     0,     0,     0,     0,     0,     0,     0],
            [ 0,  0,  0, -1,    0,    0,    0,    0,    0,    0,    0,    1,     0,     0,     0,     0,     0,     0,     0,     0],
            [-1,  0,  0,  0,    0,    0,    0,    0,    0,    0,    0,    0,     1,     0,     0,     0,     0,     0,     0,     0],
            [ 0, -1,  0,  0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1,     0,     0,     0,     0,     0,     0],
            [ 0,  0, -1,  0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1,     0,     0,     0,     0,     0],
            [ 0,  0,  0, -1,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     1,     0,     0,     0,     0],
            [-1,  0,  0,  0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     1,     0,     0,     0],
            [ 0, -1,  0,  0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     1,     0,     0],
            [ 0,  0, -1,  0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     1,     0],
            [ 0,  0,  0, -1,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,     0,     0,     0,     0,     1], # Condition 3 end
            [ 0,  0,  0,  0,  0.5,    0,    0,    0,  0.5,    0,    0,    0,  -0.5,     0,     0,     0,  -0.5,     0,     0,     0], # Condition 4 start
            [ 0,  0,  0,  0,    0,  0.5,    0,    0,    0,  0.5,    0,    0,     0,  -0.5,     0,     0,     0,  -0.5,     0,     0],
            [ 0,  0,  0,  0,    0,    0,  0.5,    0,    0,    0,  0.5,    0,     0,     0,  -0.5,     0,     0,     0,  -0.5,     0],
            [ 0,  0,  0,  0,    0,    0,    0,  0.5,    0,    0,    0,  0.5,     0,     0,     0,  -0.5,     0,     0,     0,  -0.5],
            [ 0,  0,  0,  0, -0.5,    0,    0,    0, -0.5,    0,    0,    0,   0.5,     0,     0,     0,   0.5,     0,     0,     0],
            [ 0,  0,  0,  0,    0, -0.5,    0,    0,    0, -0.5,    0,    0,     0,   0.5,     0,     0,     0,   0.5,     0,     0],
            [ 0,  0,  0,  0,    0,    0, -0.5,    0,    0,    0, -0.5,    0,     0,     0,   0.5,     0,     0,     0,   0.5,     0],
            [ 0,  0,  0,  0,    0,    0,    0, -0.5,    0,    0,    0, -0.5,     0,     0,     0,   0.5,     0,     0,     0,   0.5],
            [ 0,  0,  0,  0, -0.5,    0,    0,    0, -0.5,    0,    0,    0,   0.5,     0,     0,     0,   0.5,     0,     0,     0],
            [ 0,  0,  0,  0,    0, -0.5,    0,    0,    0, -0.5,    0,    0,     0,   0.5,     0,     0,     0,   0.5,     0,     0],
            [ 0,  0,  0,  0,    0,    0, -0.5,    0,    0,    0, -0.5,    0,     0,     0,   0.5,     0,     0,     0,   0.5,     0],
            [ 0,  0,  0,  0,    0,    0,    0, -0.5,    0,    0,    0, -0.5,     0,     0,     0,   0.5,     0,     0,     0,   0.5],
            [ 0,  0,  0,  0,  0.5,    0,    0,    0,  0.5,    0,    0,    0,  -0.5,     0,     0,     0,  -0.5,     0,     0,     0],
            [ 0,  0,  0,  0,    0,  0.5,    0,    0,    0,  0.5,    0,    0,     0,  -0.5,     0,     0,     0,  -0.5,     0,     0],
            [ 0,  0,  0,  0,    0,    0,  0.5,    0,    0,    0,  0.5,    0,     0,     0,  -0.5,     0,     0,     0,  -0.5,     0],
            [ 0,  0,  0,  0,    0,    0,    0,  0.5,    0,    0,    0,  0.5,     0,     0,     0,  -0.5,     0,     0,     0,  -0.5]  # Condition 4 end
        ])

        self.assertTrue(np.array_equal(A, A_))